// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DesertFigureType string

const (
	DesertFigureTypeWriter  DesertFigureType = "writer"
	DesertFigureTypeSubject DesertFigureType = "subject"
)

func (e *DesertFigureType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DesertFigureType(s)
	case string:
		*e = DesertFigureType(s)
	default:
		return fmt.Errorf("unsupported scan type for DesertFigureType: %T", src)
	}
	return nil
}

type NullDesertFigureType struct {
	DesertFigureType DesertFigureType `json:"desert_figure_type"`
	Valid            bool             `json:"valid"` // Valid is true if DesertFigureType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDesertFigureType) Scan(value interface{}) error {
	if value == nil {
		ns.DesertFigureType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DesertFigureType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDesertFigureType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DesertFigureType), nil
}

type ExcerptType string

const (
	ExcerptTypeStory   ExcerptType = "story"
	ExcerptTypePassage ExcerptType = "passage"
)

func (e *ExcerptType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ExcerptType(s)
	case string:
		*e = ExcerptType(s)
	default:
		return fmt.Errorf("unsupported scan type for ExcerptType: %T", src)
	}
	return nil
}

type NullExcerptType struct {
	ExcerptType ExcerptType `json:"excerpt_type"`
	Valid       bool        `json:"valid"` // Valid is true if ExcerptType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullExcerptType) Scan(value interface{}) error {
	if value == nil {
		ns.ExcerptType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ExcerptType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullExcerptType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ExcerptType), nil
}

type DesertFigure struct {
	ID          int64              `json:"id"`
	FullName    pgtype.Text        `json:"full_name"`
	FirstName   pgtype.Text        `json:"first_name"`
	LastName    pgtype.Text        `json:"last_name"`
	Type        DesertFigureType   `json:"type"`
	DateOfBirth pgtype.Timestamp   `json:"date_of_birth"`
	DateOfDeath pgtype.Timestamp   `json:"date_of_death"`
	DateAdded   pgtype.Timestamptz `json:"date_added"`
	LastUpdated pgtype.Timestamp   `json:"last_updated"`
	CreatedBy   int64              `json:"created_by"`
}

type Excerpt struct {
	ID             int64              `json:"id"`
	Body           string             `json:"body"`
	Type           ExcerptType        `json:"type"`
	ReferenceTitle pgtype.Text        `json:"reference_title"`
	ReferencePage  pgtype.Int4        `json:"reference_page"`
	ReferenceUrl   pgtype.Text        `json:"reference_url"`
	DesertFigure   int64              `json:"desert_figure"`
	DateAdded      pgtype.Timestamptz `json:"date_added"`
	LastUpdated    pgtype.Timestamp   `json:"last_updated"`
	CreatedBy      int64              `json:"created_by"`
}

type ExcerptTag struct {
	ExcerptID int64 `json:"excerpt_id"`
	TagID     int64 `json:"tag_id"`
}

type Icon struct {
	ID           int64              `json:"id"`
	Url          string             `json:"url"`
	Description  pgtype.Text        `json:"description"`
	CreatedBy    int64              `json:"created_by"`
	DesertFigure int64              `json:"desert_figure"`
	DateAdded    pgtype.Timestamptz `json:"date_added"`
	LastUpdated  pgtype.Timestamp   `json:"last_updated"`
}

type Tag struct {
	ID        int64              `json:"id"`
	Name      string             `json:"name"`
	DateAdded pgtype.Timestamptz `json:"date_added"`
	CreatedBy int64              `json:"created_by"`
}

type User struct {
	ID            int64       `json:"id"`
	Name          string      `json:"name"`
	Email         string      `json:"email"`
	EmailVerified pgtype.Bool `json:"email_verified"`
	Image         pgtype.Text `json:"image"`
}
